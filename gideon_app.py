# -*- coding: utf-8 -*-
"""Gideon_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1abVvVaR8Cp16ENxH8GVHJ2nHOGaFXIrs
"""

pip install flask_ngrok

# Commented out IPython magic to ensure Python compatibility.
# %mkdir templates -p

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/index1.html
# <!doctype html>
# 	<html lang="en">
# 				<head>
# 					<title>Gideon</title>
# 					<style>
# 						body, html {
# 							height: 100%;
# 							margin: 0;
# 						}
# 						html{
# 							background: url(https://raw.githubusercontent.com/CoderAnubhav/Gideon-AI-Chatbot/master/bg8.jpg);
# 							-webkit-background-size:cover;
# 							-moz-background-size:cover;
# 							-o-background-size:cover;
# 							height:100%;
# 							background-position: center;
# 							background-repeat: no-repeat;
# 							background-size: cover;
# 						}
# 						input#name.form-control{
# 							margin-right:50px;
# 							margin-top: 25px;
# 							width:75%;
# 							padding:10px;
# 						}
# 						button.btn.btn-primary{
# 							width:100px;
# 							margin-top: 25px;
# 							padding:10px;
# 						}
# 						label.control-label{
# 							padding-left: 6px;
# 							padding-right:5px;
# 							font-size: 25px;
# 							font-weight:bold;
# 						}	
# 					</style>
# 				</head>
# 					{% for queries in queries_so_far %}
# 					<p style="font-weight: bold; font-size:20px; color:#00FF00;">{{queries}}</p>
# 					{% endfor %}
# 					<p>{{errors}}</p>
# 					<form class="form-inline" method="post" action=".">
# 
# 						<div class="form-group"> 
# 							<label class="control-label " for="user" style="color:yellow;" style="font-size:25px">User:</label>
# 							<input class="form-control" id="name" name="user" type="text" size="100%"/>
# 							<button class="btn btn-primary" name="action" value="Ask">Ask</button>
# 						</div>		
# 					</form>		 
# 			</html>

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/index2.html
# <!doctype html>
# 	<html lang="en">
# 				<head>
# 					<title>Gideon</title>
# 					<style>
# 						body, html {
# 							height: 100%;
# 							margin: 0;
# 						}
# 						html{
# 							background: url(https://raw.githubusercontent.com/CoderAnubhav/Gideon-AI-Chatbot/master/bg8.jpg);
# 							-webkit-background-size:cover;
# 							-moz-background-size:cover;
# 							-o-background-size:cover;
# 							height:100%;
# 							background-position: center;
# 							background-repeat: no-repeat;
# 							background-size: cover;
# 						}
# 						input#name.form-control{
# 							margin-right:50px;
# 							margin-top: 25px;
# 							width:75%;
# 							padding:10px;
# 						}
# 						button.btn.btn-primary{
# 							width:100px;
# 							margin-top: 25px;
# 							padding:10px;
# 						}
# 						label.control-label{
# 							padding-left: 6px;
# 							padding-right:5px;
# 							font-size: 25px;
# 							font-weight:bold;
# 						}	
# 					</style>
# 				</head>
# 					{% for queries in queries_so_far %}
# 					<p style="font-weight: bold; font-size:20px; color:#00FF00;">{{queries}}</p>
# 					{% endfor %}
# 					<p>{{errors}}</p>
# 					<p><a href="/" style="font-weight: bold; font-size:25px; color:#FF0000;">Ask again</a>	 
# 			</html>

#%%writefile main.py
from flask import Flask, request, session,render_template
from flask_ngrok import run_with_ngrok
import sys
sys.path.append('/content/drive/My Drive/Gideon_api')
import gideon_class_api as g

app = Flask(__name__)
app.config["SECRET_KEY"] = "AIwillchangetheworld"
run_with_ngrok(app)
gid=g.Gideon()

@app.route("/", methods=["GET", "POST"])
def func():
    if "inputs" not in session:
        intro=gid.intro()
        session["inputs"] = []
        session["inputs"].append(intro)
    
    queries_so_far=""
    result=""
    errors = ""      
    flag=True
    if request.method == "POST":
        try:
            session["inputs"].append("User : "+(request.form["user"]))
            session.modified = True
        except:
            errors += "<p>{!r} is not a valid query.</p>\n".format(request.form["user"])
 
        if request.form["action"] == "Ask":
            result,flag = gid.chatbot_query((request.form["user"]))
            session["inputs"].append(result)
            session.modified = True

    if len(session["inputs"]) == 0:
        queries_so_far =""
    else:
        #queries_so_far = "<p>Queries so far:</p>"
        i=0
        for queries in session["inputs"]:
            if i%2==0:
                queries_so_far +=queries+"\n"
            else:
                queries_so_far +=queries+"\n"
            i+=1
    queries_so_far=queries_so_far.split("\n")
    if flag:
        return render_template('index1.html',queries_so_far=queries_so_far,errors=errors)
              
    else:
        del session['inputs']
        session.modified = True
        return render_template('index2.html',queries_so_far=queries_so_far,errors=errors)

app.run()